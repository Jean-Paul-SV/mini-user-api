# Docker Compose para Mini API de Gestión de Usuarios
# Prueba Técnica - Desarrollador Jr. Backend
#
# @author Jean Paul Serrato Violeth
# @version 1.0.0

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: mini-user-api-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: mini_user_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mini-user-api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mini_user_api"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Node.js
  api:
    build: .
    container_name: mini-user-api-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: mini_user_api
      DB_USER: postgres
      DB_PASSWORD: postgres123
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mini-user-api-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer para administración de base de datos (opcional)
  adminer:
    image: adminer:4.8.1
    container_name: mini-user-api-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - mini-user-api-network

volumes:
  postgres_data:
    driver: local

networks:
  mini-user-api-network:
    driver: bridge
